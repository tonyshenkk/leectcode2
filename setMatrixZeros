//O(m + n) space complexity, but faster
class Solution {
public:
    void setZeroes(vector<vector<int> > &matrix) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int row = matrix.size();
        if(row < 1)
            return;
        int col = matrix[0].size();
        
        vector<int> rowZ(row, 1), colZ(col, 1);
        
        for(int i = 0; i < row; i++)
        {
            for(int j = 0; j < col; j++)
            {
                if(matrix[i][j] == 0)
                {
                    rowZ[i] = 0;
                    colZ[j] = 0;
                }
            }
        }
        for(int i = 0; i < row; i++)
        {
            if(!rowZ[i])
                for(int j = 0; j < col; j++)
                {
                    matrix[i][j] = 0;
                }
        }
        for(int i = 0; i < col; i++)
        {
            if(!colZ[i])
                for(int j = 0; j < row; j++)
                    matrix[j][i] = 0;
        }
        
        return;
    }
};


//no extra space, but slower
class Solution {
public:
    void setZeroes(vector<vector<int> > &matrix) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int row = matrix.size();
        if(row < 1)
            return;
        int col  = matrix[0].size();
        
        bool firstR = false, firstC = false;
        for(int i = 0; i < col; i++)
        {
            if(matrix[0][i] == 0)
                firstR = true;
        }
        for(int i = 0; i < row; i++)
        {
            if(matrix[i][0] == 0)
                firstC = true;
        }
        for(int i = 1; i < row; i++)
        {
            for(int j = 1; j < col; j++)
            {
                if(matrix[i][j] == 0)
                {
                    matrix[0][j] = 0;
                    matrix[i][0] = 0;
                }
            }
        }
        for(int i = 1; i < row; i++)
        {
            if(matrix[i][0] == 0)
            {
                for(int j = 1; j < col; j++)
                    matrix[i][j] = 0;
            }
        }
        for(int i = 1; i < col; i++)
        {
            if(matrix[0][i] == 0)
            {
                for(int j = 0; j < row; j++)
                    matrix[j][i] = 0;
            }
        }
        if(firstR)
        {
            for(int i = 0; i < col; i++)
                matrix[0][i] = 0;
        }
        if(firstC)
        {
            for(int i = 0; i < row; i++)
                matrix[i][0] = 0;
        }
    
    	return;
    }
};
