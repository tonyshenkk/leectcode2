class Solution {
public:
    bool check(vector<vector<char> > &board, string &word, int row, int col, int curlen, vector<vector<bool>> &visit)
    {
        if(curlen == word.length() )
            return true;
        if(row >= board.size() || col >= board[0].size())
            return false;
        
        if(word[curlen] == board[row][col] && !visit[row][col])
        {
            visit[row][col] = true;
            bool t = check(board, word, row + 1, col, curlen + 1, visit) || check(board, word, row - 1, col, curlen + 1, visit) ||
            check(board, word, row, col + 1, curlen + 1, visit) || check(board, word, row, col -1, curlen + 1, visit);
            visit[row][col] = false;
            return t;
        
        }
        else
            return false;
    }
    bool exist(vector<vector<char> > &board, string word) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<vector<bool>> visit(board.size(), vector<bool>(board[0].size(), false));
        for(int i = 0; i < board.size(); i++)
        {
            for(int j = 0; j < board[0].size(); j++)
            {
                if(check(board, word, i, j, 0, visit))
                    return true;
            }
        }
        return false;
       
    }
};
