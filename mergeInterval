/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 
bool compare(const Interval &a, const Interval &b)
{
    return a.start < b.start;
}


class Solution {
public:

    vector<Interval> merge(vector<Interval> &intervals) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        sort(intervals.begin(), intervals.end(), compare);
        vector<Interval> res;
        int len = intervals.size();
        if(len < 1)
            return res;
        res.push_back(intervals[0]);
        Interval t;
        for(int i = 1; i < len; i++)
        {
            t = res.back();
            if(intervals[i].start <= t.end && intervals[i].end > t.end)
                res.back().end = intervals[i].end;
            else if(intervals[i].start > t.end)
                res.push_back(intervals[i]);
        }
        return res;
    }
};
