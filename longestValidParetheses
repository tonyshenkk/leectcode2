class Solution {
public:
    int longestValidParentheses(string s) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int len = s.length();
        if(len < 2)
            return 0;
        int maxLen = 0;
        
        const char *str = s.c_str();
        const char *p = str;
        vector<const char*> st;
        while(*p)
        {
            if('(' == *p)
                st.push_back(p);
            else
            {
                if(!st.empty() && '(' == *st.back())
                {
                    st.pop_back();
                    maxLen = max(maxLen, p - (st.empty() ? str - 1 : st.back()));
                }
                else
                    st.push_back(p);
            }
            p++;
        }
        return maxLen;
    }
};
