/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval> &intervals, Interval newInterval) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function 
        vector<Interval> res;
        res.push_back(newInterval);
        
        Interval t;
        int len =  intervals.size();
        for(int i = 0; i < len; i++)
        {
            t = res.back();
            res.pop_back();
            
            if(t.end < intervals[i].start)
            {
                res.push_back(t);
                res.push_back(intervals[i]);
            }
            else if(t.start > intervals[i].end)
            {
                res.push_back(intervals[i]);
                res.push_back(t);
            }
            else
            {
                t.start = min(t.start, intervals[i].start);
                t.end = max(t.end, intervals[i].end);
                res.push_back(t);
            }
        }
        return res;
    }
};
